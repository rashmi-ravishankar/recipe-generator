{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","link","className","style","recipe","map","ingredient","text","Math","round","href","src","alt","App","URL","sessionStorage","getItem","useState","recipes","setRecipes","searchBar","setSearchBar","search","setSearch","setT","rolodex","parseInt","setRolodex","e","setItem","useEffect","console","log","String","valueOf","JSON","parse","getRecipes","a","fetch","response","json","data","stringify","hits","type","value","onChange","target","onClick","class","filter","index","key","label","url","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1c41c63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3B3Qw\"};","import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, link }) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <p><b>Ingredients:</b></p>\r\n            <ul>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ul>\r\n            <p><b>Calories: </b>{Math.round(calories)}</p>\r\n            <p>For more details click <a href={link}>here</a>!</p>\r\n            <img src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"c9c5311d\";\n  const APP_KEY = \"6b827db324b96cbf534cda1763fb6a6c\";\n  let URL = sessionStorage.getItem(\"URL\");\n\n  const [recipes, setRecipes] = useState([]);\n  const [searchBar, setSearchBar] = useState(sessionStorage.getItem(\"searchBar\"));\n  const [search, setSearch] = useState(\"\");\n  const [t, setT] = useState(\"\");\n  \n  let rolodex = parseInt((sessionStorage.getItem('rolodex') === null) ? \"0\" : sessionStorage.getItem('rolodex'));\n  \n  const setRolodex = (e) => {\n    rolodex = e;\n    sessionStorage.setItem('rolodex', rolodex);\n  };\n\n  const setURL = (e) => {\n    URL = (`https://api.edamam.com/search?q=`+e+`&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    sessionStorage.setItem(\"URL\", URL);\n    rolodex = 0;\n  }\n\n  useEffect( () => {\n    console.log('rolodex:' + rolodex);\n    if ( new String(sessionStorage.getItem('prevURL')).valueOf() == new String(sessionStorage.getItem('URL')).valueOf()) {\n      setRecipes((sessionStorage.getItem('recipes') === null) ? recipes : JSON.parse(sessionStorage.getItem('recipes')));\n    } else {\n      getRecipes();\n    }\n  }, [search, rolodex]);\n\n  const getRecipes = async () => {\n    const response = await fetch(URL);\n    const data = await response.json();\n    sessionStorage.setItem('recipes', JSON.stringify(data.hits));\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearchBar = (e) => {\n    setSearchBar(e.target.value);\n  };\n  \n  const performSearch = () => {\n    sessionStorage.setItem(\"searchBar\", searchBar);\n    sessionStorage.setItem('rolodex','0');\n    sessionStorage.setItem(\"prevURL\", URL);\n    setURL(searchBar);\n    setSearch(searchBar);\n  };\n\n  const increaseIndex = () => {\n    let e = 1;\n    if (rolodex === null){\n      sessionStorage.setItem('rolodex', 0);\n      setRolodex(0);\n    }\n    if ((rolodex + e) <= (recipes.length - 1)) {\n      sessionStorage.setItem('rolodex', (rolodex + e));\n      setRolodex(parseInt(rolodex) + e);\n      setT(rolodex);\n    }\n  };\n\n  const decreaseIndex = () => {\n    let e = -1;\n    if (rolodex === null){\n      sessionStorage.setItem('rolodex', 0);\n      setRolodex(0);\n    }\n    if ((rolodex + e) >= 0) {\n      sessionStorage.setItem('rolodex', (rolodex + e));\n      setRolodex(parseInt(rolodex) + e);\n      setT(rolodex);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n     <form className=\"search-form\">\n       <input \n       className=\"search-bar\" \n       type=\"text\" \n       value={searchBar} \n       onChange={updateSearchBar}\n       />\n       <button className=\"search-button\" type=\"submit\" onClick={performSearch}>Search</button>\n     </form>\n     <div class=\"container\">\n     <div className={recipes}>\n     <button className=\"change-button\" onClick={decreaseIndex}>Back</button>\n     <div class=\"spaced\"></div>\n     {recipes.filter((recipe, index) => index === rolodex).map((recipe) => (\n        <Recipe\n       key={recipe.recipe.label} \n       title={recipe.recipe.label} \n       calories={recipe.recipe.calories} \n       image={recipe.recipe.image}\n       ingredients={recipe.recipe.ingredients}\n       link={recipe.recipe.url}\n       />\n       ))}\n       <div class=\"spaced\"></div>\n       <button className=\"change-button\" onClick={increaseIndex}>Next</button>\n     </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}